import java.util.List;
import java.util.UUID;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.util.ArrayList;

public class Server {
//public class Server implements Runnable {
	
	private DatagramSocket socket;
	private int port;
	private Thread run, manage, send, receive;
	private boolean running = false;
	private List<ServerClient> clients = new ArrayList<ServerClient>();
	
	public Server(int port) {
		this.port = port;
		try {
			socket = new DatagramSocket(port);
		} catch (SocketException e) {
			e.printStackTrace();
			return;
		}
//		run = new Thread(this,"Server");
//		run.start();
		running = true;
		System.out.println("Server Thread Started on port :"+port);
		manageClients();
		recieve();
		
	}
//	@Override
//	public void run() {
//		running = true;
//		System.out.println("Server Thread Started on port :"+port);
//		manageClients();
//		recieve();
//	}
	private void manageClients() {
		manage = new Thread("Manage") {
			public void run() {
				while(running) {
					//managing
				}
			}
		};
		manage.start();
	}
	private void recieve() {
		receive = new Thread("Recieve") {
			public void run() {
				while(running) {
					byte[] data = new byte[1024];
					DatagramPacket packet = new DatagramPacket(data,data.length);
					try {
						socket.receive(packet);
					} catch (IOException e) {
						e.printStackTrace();
					}
					process(packet);
				}
			}
		};
		receive.start();
	}
	private void sendToAll(String message){
		for(int i=0;i<clients.size();i++){
			ServerClient client = clients.get(i);
			send(message.getBytes(),client.address,client.port);
		}
	}
	private void send(final byte[] data, final InetAddress address, final int port){
		send = new Thread("Send") { 
			public void run() {
				DatagramPacket packet = new DatagramPacket(data,data.length,address,port);
				try {
					socket.send(packet);
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		};
		send.start();
	}
	private void send(String message, InetAddress address, int port) {
		message+="/e/";
		send(message.getBytes(),address,port);
	}
	private void process(DatagramPacket packet) {
		String string = new String(packet.getData());
		if(string.startsWith("/c/")){
			//UUID id = UUID.randomUUID(); //universally unique
			String message = string.substring(3,string.length());
			int id = UniqueIdentifier.getIdentifier();
			clients.add(new ServerClient(string.substring(3,string.length()),
					packet.getAddress(),packet.getPort(),id));
			System.out.println("UniqueID: "+id+" message: "+message);
			String ID ="/c/"+id;
			send(ID,packet.getAddress(),packet.getPort());
		} else if (string.startsWith("/d/")) {
			String id=string.split("/d/|/e/")[1];
			disconnect(Integer.parseInt(id),true);
		} else if (string.startsWith("/m/")) {
			sendToAll(string);
		} else {
			System.out.println(string);
		}
	}
	private void disconnect(int id, boolean status) {
		ServerClient serverClient=null;
		for(int i=0; i<clients.size();i++) {
			if(clients.get(i).getID()==id){
				serverClient=clients.get(i);
				clients.remove(i);
				break;
			}
		}
		String message="";
		System.out.println(serverClient.getID());
		if(status) {
			message="Client "+serverClient.name+" ("+serverClient.getID()+") @ "+serverClient.address.toString()+":"+serverClient.port+" disconnected.";
		} else {
			message="Client "+serverClient.name+" ("
					+serverClient.getID()+") @ "+serverClient.address.toString()
					+":"+serverClient.port+" timed out.";
		}
		System.out.println(message);
	}
}
