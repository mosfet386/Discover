package checkmate.game;

import java.awt.BorderLayout;
import java.awt.Canvas;
import java.awt.Dimension;

import javax.swing.JFrame;

public class Game extends Canvas implements Runnable{

	private static final long serialVersionUID = 1L;
	public static final int WIDTH=160;
	public static final int HEIGHT=WIDTH*(12/9);
	public static final int SCALE=3;
	public static final String NAME="Game";
	
	private JFrame frame;
	
	public boolean running=false;
	
	public Game(){
		setMinimumSize(new Dimension(WIDTH*SCALE,HEIGHT*SCALE));
		setMinimumSize(new Dimension(WIDTH*SCALE,HEIGHT*SCALE));
		setMaximumSize(new Dimension(WIDTH*SCALE,HEIGHT*SCALE));
		setPreferredSize(new Dimension(WIDTH*SCALE,HEIGHT*SCALE));
		frame=new JFrame(NAME);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setLayout(new BorderLayout());
		frame.add(this,BorderLayout.CENTER); //add this canvas
		frame.pack(); //no smaller than preferred size
		frame.setLocationRelativeTo(null);
		frame.setVisible(true);
	}
	public void tick(){ //update game logic
		
	}
	public void render(){ //present logic
		
	}
	@Override
	public void run(){
		long lastTimeNS=System.nanoTime();
		double nsPerTick=1000000000D/60D; //time between game updates
		int ticks=0;
		int frames=0;
		long lastTimeMS=System.currentTimeMillis();
		double ticksToProcess=0;
		
		while(running){
			long nowTimeNS=System.nanoTime();
			//elapsedNS*ticksPerNS -> number of ticks to process
			ticksToProcess+=(nowTimeNS-lastTimeNS)/nsPerTick; 
			lastTimeNS=nowTimeNS;
			while(ticksToProcess>=1){
				ticks++;
				tick();
				ticksToProcess-=1;
			}
			frames++;
			render();
			System.out.println(frames+", "+ticks);
		}
	}
	public synchronized void start(){
		running=true;
		new Thread(this,"Game Main").start();
	}
	public synchronized void stop(){
		running=false;
	}
	public static void main(String arg[]){
		new Game().start();
	}


}
